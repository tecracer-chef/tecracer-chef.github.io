<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on tecRacer Chef</title><link>https://tecracer-chef.github.io/post.html</link><description>Recent content in Posts on tecRacer Chef</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 16 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://tecracer-chef.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker Architecture - Intel? ARM? both?</title><link>https://tecracer-chef.github.io/2023/03/docker-architecture-intel-arm-both.html</link><pubDate>Thu, 16 Mar 2023 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2023/03/docker-architecture-intel-arm-both.html</guid><description>&lt;p>Up to a few years back, writing Dockerfiles was easy. In many cases, it still is - unless you are working with a mixed fleet of Intel and ARM-based processors. Are you familiar with this situation and you do not want to maintain two almost identical Dockerfiles? There is a solution&amp;hellip;&lt;/p></description></item><item><title>Arm your GitHub Actions Runners using AWS Graviton</title><link>https://tecracer-chef.github.io/2023/03/arm-your-github-actions-runners-using-aws-graviton.html</link><pubDate>Tue, 14 Mar 2023 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2023/03/arm-your-github-actions-runners-using-aws-graviton.html</guid><description>GitHub does not support any ARM GitHub Actions Runner. So what now? Build it within your AWS environment!
The results are pretty cool: You have full control over the Runners and have no more time constraints like long-running workflows that consume Runners usage minutes.
I will guide you through the basics of creating an AWS EC2 instance and installing the minimum requirements on the OS for having a running GitHub Actions Runner.</description></item><item><title>FSx for NetApp ONTAP Manageability Options</title><link>https://tecracer-chef.github.io/2023/01/fsx-for-netapp-ontap-manageability-options.html</link><pubDate>Fri, 06 Jan 2023 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2023/01/fsx-for-netapp-ontap-manageability-options.html</guid><description>&lt;p>While Amazon FSx for NetApp ONTAP (FSxN) seems relatively easy on the AWS level, it is vastly more powerful if you pick another way to manage it.&lt;/p>
&lt;p>This post will look at a quick run-down across the AWS Web Console, NetApp&amp;rsquo;s BlueXP, various APIs, and the CLI.&lt;/p></description></item><item><title>Using AWS mac1/mac2 Instances with Test Kitchen</title><link>https://tecracer-chef.github.io/2022/12/using-aws-mac1/mac2-instances-with-test-kitchen.html</link><pubDate>Fri, 09 Dec 2022 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2022/12/using-aws-mac1/mac2-instances-with-test-kitchen.html</guid><description>&lt;p>Everybody who had to write software or work with configuration management for Apple knows of the problems to get access to test machines. AWS does offer both Intel- and M1-based Mac instances now and with &lt;code>kitchen-ec2&lt;/code> v3.15.0 it is finally possible to use them in your existing workflow.&lt;/p></description></item><item><title>Dedicated Hosts with Test Kitchen</title><link>https://tecracer-chef.github.io/2022/12/dedicated-hosts-with-test-kitchen.html</link><pubDate>Fri, 02 Dec 2022 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2022/12/dedicated-hosts-with-test-kitchen.html</guid><description>&lt;p>Sometimes, you need to deploy software for tests with special licensing terms. To solve this, AWS offers Dedicated Instances and Dedicated Hosts - and now you can use them with &lt;a href="https://kitchen.ci">Test Kitchen 3.14&lt;/a> in your developer workflows.&lt;/p></description></item><item><title>Test-Kitchen on AWS (2022 edition)</title><link>https://tecracer-chef.github.io/2022/11/test-kitchen-on-aws-2022-edition.html</link><pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2022/11/test-kitchen-on-aws-2022-edition.html</guid><description>&lt;p>Test-Kitchen is a tool to manage your test machine lifecycle, similar to HashiCorp Vagrant. While it has been developed with Chef in mind, it can be used with any development tool to test on new machines every time you change your code.&lt;/p>
&lt;p>As this tool continues to evolve and many examples are outdated, today I will give you some small snippets to reuse and get going quickly.&lt;/p></description></item><item><title>Logging Amazon FSx for NetApp ONTAP</title><link>https://tecracer-chef.github.io/2022/04/logging-amazon-fsx-for-netapp-ontap.html</link><pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2022/04/logging-amazon-fsx-for-netapp-ontap.html</guid><description>&lt;p>Recently, I spent a lot of time using the exciting new member of the FSx family. One detail made working with it a bit unpleasant, though - the lack of log files.&lt;/p>
&lt;p>This post details how to create a custom integration into CloudWatch Logs and make ONTAP audit logs visible.&lt;/p></description></item><item><title>Airgapped Testing - VMware Edition</title><link>https://tecracer-chef.github.io/2021/11/airgapped-testing-vmware-edition.html</link><pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2021/11/airgapped-testing-vmware-edition.html</guid><description>&lt;p>Recently, I got a bug report for the &lt;code>kitchen-vcenter&lt;/code> driver, which allows lifecycle management of testing VMs on VMware vCenter environments. Apparently, a customer tried to create a VM without any network interface.&lt;/p>
&lt;p>The problem was that this crashed in a very unintuitive way. But it made me wonder: Would it be possible to use non-networked machines for tests? It turns out: That&amp;rsquo;s absolutely possible!&lt;/p></description></item><item><title>Update your Style in Test Kitchen (Part 2)</title><link>https://tecracer-chef.github.io/2021/10/update-your-style-in-test-kitchen-part-2.html</link><pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2021/10/update-your-style-in-test-kitchen-part-2.html</guid><description>&lt;p>It is time for a follow-up to my &lt;a href="https://aws-blog.de/2020/06/update-your-style-in-test-kitchen.html">blog post from last year&lt;/a> - especially as Test Kitchen 3.0 changed some defaults. Let&amp;rsquo;s check some cargo-culted settings out in this blog post.&lt;/p></description></item><item><title>Third Party Platform Support for Chef</title><link>https://tecracer-chef.github.io/2021/10/third-party-platform-support-for-chef.html</link><pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2021/10/third-party-platform-support-for-chef.html</guid><description>&lt;p>Currently, users of Chef are limited to working with the platforms supported by the Chef core. But with the advancements of Target Mode, the story could change quickly. Learn about the idea of a &amp;ldquo;Platform Support Pack&amp;rdquo; and what it could mean for the future.&lt;/p></description></item><item><title>Testing Terraform with InSpec (Part 1)</title><link>https://tecracer-chef.github.io/2021/10/testing-terraform-with-inspec-part-1.html</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2021/10/testing-terraform-with-inspec-part-1.html</guid><description>While Infrastructure-as-Code slowly becomes omnipresent, many of the communicated advantages of the approach stay mostly unrealized. Sure, code style checks (linting) and even automated documentation get more common every month. But one of the cornerstones often gets ignore: testing.
Let&amp;rsquo;s see which types of code testing are available and how to do it without writing too much code.
The promise of the Infrastructure-as-Code (short: IaC) movement is to handle infrastructure just as if it was a program.</description></item><item><title>Insider Story - Terraformi</title><link>https://tecracer-chef.github.io/2021/09/insider-story-terraformi.html</link><pubDate>Tue, 21 Sep 2021 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2021/09/insider-story-terraformi.html</guid><description>We, as tecRacer, thrive on our individual and unique employees. In our new series &amp;ldquo;Insider Stories&amp;rdquo; Terraformi will tell you how it found its way to the company as well as how it experiences working for tecRacer.</description></item><item><title>Chef Technology Partner of the Year</title><link>https://tecracer-chef.github.io/2021/09/chef-technology-partner-of-the-year.html</link><pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2021/09/chef-technology-partner-of-the-year.html</guid><description>&lt;p>To our pleasant surprise, Chef awarded tecRacer the &lt;a href="https://www.chef.io/partners/partner-awards">&amp;ldquo;2021 Technology Partner of the Year&amp;rdquo;&lt;/a> title at the opening keynote of ChefConf 2021.&lt;/p></description></item><item><title>CDK Infrastructure Testing - Part 2a - Implement Unit, Integration and Application Test for CDK Infrastructure and an EC2 Web Server Application</title><link>https://tecracer-chef.github.io/cdk-cit-part2a/</link><pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/cdk-cit-part2a/</guid><description>&lt;p>With CDK you create Infrastructure as Code - IaC. You can automate the test for the IaC code.
The three test tastes -Unit, Integration and Application- should work closely together. Here I show you how. It is like the three steps of coffee tasting: 1 smell, 2 Taste, 3 Feel.&lt;/p></description></item><item><title>CIT - Build CDK Infrastructure Testing - Part 1 - Terratest and the Integrated Integration</title><link>https://tecracer-chef.github.io/2021/05/cit-build-cdk-infrastructure-testing-part-1-terratest-and-the-integrated-integration.html</link><pubDate>Sun, 23 May 2021 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2021/05/cit-build-cdk-infrastructure-testing-part-1-terratest-and-the-integrated-integration.html</guid><description>&lt;h1 id="heading">&lt;/h1>
&lt;p>TL;DR You don`t need a DSL to do easy integration testing. With CDK available in go, infrastructure test can be programmed with GO packages easily.&lt;/p></description></item><item><title>Air-Gapped Compliance Scans with InSpec</title><link>https://tecracer-chef.github.io/2020/10/air-gapped-compliance-scans-with-inspec.html</link><pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2020/10/air-gapped-compliance-scans-with-inspec.html</guid><description>&lt;p>&lt;a href="https://www.chef.io/products/chef-inspec">Chef InSpec&lt;/a> offers the possibility to scan any type of device using community-authored compliance profiles. As InSpec needs to connect to the machines, networking and firewall rules make this task tricky in bigger environments.&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
With the newly released &lt;code>train-awsssm&lt;/code> plugin, this situation changes drastically. Read on, if you want to know how.&lt;/p></description></item><item><title>Deploying Custom Ohai Plugins</title><link>https://tecracer-chef.github.io/2020/10/deploying-custom-ohai-plugins.html</link><pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2020/10/deploying-custom-ohai-plugins.html</guid><description>&lt;p>With the deprecation of the &lt;code>ohai&lt;/code> cookbook, there is some confusion on how to deploy custom Ohai plugins.&lt;/p>
&lt;p>This short summary shows, how easy deployments have become.&lt;/p></description></item><item><title>Mocking data in Test Kitchen (Part 2)</title><link>https://tecracer-chef.github.io/2020/08/mocking-data-in-test-kitchen-part-2.html</link><pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2020/08/mocking-data-in-test-kitchen-part-2.html</guid><description>&lt;p>Going beyond the easier use case of mocking attributes and databags, we sometimes want to fake some data about the system itself.&lt;/p></description></item><item><title>Mocking data in Test Kitchen</title><link>https://tecracer-chef.github.io/2020/08/mocking-data-in-test-kitchen.html</link><pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2020/08/mocking-data-in-test-kitchen.html</guid><description>&lt;p>The more complex your cookbooks, the bigger the need to supply some external information to your test machines. Passing specific attributes, values of databags or secrets for testing become necessary. We will go through these use cases and show how to mock the data in this post.&lt;/p></description></item><item><title>Update your Style in Test Kitchen</title><link>https://tecracer-chef.github.io/2020/06/update-your-style-in-test-kitchen.html</link><pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2020/06/update-your-style-in-test-kitchen.html</guid><description>&lt;p>It is surprising how many resources on the Internet are carrying on outdated or deprecated information - the Chef ecosystem is no exception to this. While outdated style in Ruby files has been detected via &lt;code>cookstyle&lt;/code> for a while, Test Kitchen files still have no sanity checks yet.&lt;/p>
&lt;p>Let&amp;rsquo;s see what changed in this short post.&lt;/p></description></item><item><title>The State of Target Mode in 2020</title><link>https://tecracer-chef.github.io/2020/06/the-state-of-target-mode-in-2020.html</link><pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2020/06/the-state-of-target-mode-in-2020.html</guid><description>&lt;h1 id="the-state-of-target-mode-in-2020">The State of Target Mode in 2020&lt;/h1>
&lt;p>After my blog series on the agentless use of Chef dubbed &amp;ldquo;Target Mode&amp;rdquo; between August and October 2019, it is time to review what happened since.&lt;/p>
&lt;p>&lt;strong>Updated 14th October 2020&lt;/strong>&lt;/p></description></item><item><title>tecRacer is Chef Partner of the Year Financial Services</title><link>https://tecracer-chef.github.io/2020/06/tecracer-is-chef-partner-of-the-year-financial-services.html</link><pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2020/06/tecracer-is-chef-partner-of-the-year-financial-services.html</guid><description>ChefConf Online started this year with a big announcement for us. We have received the Chef Hartman award as &amp;ldquo;Partner of the year Financial Services&amp;rdquo;! This special award goes to companies that drove successful customer outcomes, developed special solution expertise and leveraged Chef&amp;rsquo;s GTM to drive growth. It makes us proud to be part of the whole Chef world. Thank you Chef, thank you Barry for this award!</description></item><item><title>Testing Physical Machines with kitchen-static (Part 2)</title><link>https://tecracer-chef.github.io/2020/05/testing-physical-machines-with-kitchen-static-part-2.html</link><pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2020/05/testing-physical-machines-with-kitchen-static-part-2.html</guid><description>&lt;h1 id="testing-on-physical-machines---part-2">Testing on Physical Machines - Part 2&lt;/h1>
&lt;p>After introducing how to work with physical machines and Test Kitchen last time, we will look at a feature to allow central orchestration of available machines.&lt;/p></description></item><item><title>Testing Physical Machines with kitchen-static</title><link>https://tecracer-chef.github.io/2020/04/testing-physical-machines-with-kitchen-static.html</link><pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2020/04/testing-physical-machines-with-kitchen-static.html</guid><description>&lt;h1 id="testing-on-physical-machines-with-kitchen-static">Testing on Physical Machines with kitchen-static&lt;/h1>
&lt;p>This article shows how to work with Test Kitchen on physical machines using the &lt;a href="https://github.com/tecracer-theinen/kitchen-static">kitchen-static Driver&lt;/a>. If you need to deliver a product (bundle of server and software) instead of just configuration, some tasks cannot be run on virtual machines alone but need testing on actual hardware.&lt;/p></description></item><item><title>Instant Clones with kitchen-vcenter</title><link>https://tecracer-chef.github.io/2019/10/instant-clones-with-kitchen-vcenter.html</link><pubDate>Fri, 25 Oct 2019 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2019/10/instant-clones-with-kitchen-vcenter.html</guid><description>&lt;h1 id="instant-clones-with-kitchen-vcenter">Instant Clones with kitchen-vcenter&lt;/h1>
&lt;p>Over the last few posts we optimized our kitchen-vcenter setups and are stuck with the usual, long boot times of Windows systems. Surprisingly, VMware introduced a feature which can help us get rid of those. For good.&lt;/p></description></item><item><title>Guest Operations and kitchen-vcenter</title><link>https://tecracer-chef.github.io/2019/10/guest-operations-and-kitchen-vcenter.html</link><pubDate>Fri, 18 Oct 2019 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2019/10/guest-operations-and-kitchen-vcenter.html</guid><description>&lt;h1 id="guest-operations-and-kitchen-vcenter">Guest Operations and kitchen-vcenter&lt;/h1>
&lt;p>In this part of the blog series, we will look on how to speed up IP discovery of new machines with a little-known feature of the VMware Tools.&lt;/p></description></item><item><title>Linked Clones with kitchen-vcenter</title><link>https://tecracer-chef.github.io/2019/10/linked-clones-with-kitchen-vcenter.html</link><pubDate>Fri, 11 Oct 2019 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2019/10/linked-clones-with-kitchen-vcenter.html</guid><description>&lt;h1 id="linked-clones-with-kitchen-vcenter">Linked Clones with kitchen-vcenter&lt;/h1>
&lt;p>Quickly starting new Test Kitchen machines is one of the main concerns for getting the desired feedback cycles in cookbook development. While machines get created as a full clone by default, the kitchen-vcenter driver offers a better alternative.&lt;/p></description></item><item><title>Target Mode with Serial Devices</title><link>https://tecracer-chef.github.io/2019/10/target-mode-with-serial-devices.html</link><pubDate>Fri, 04 Oct 2019 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2019/10/target-mode-with-serial-devices.html</guid><description>&lt;h1 id="target-mode-with-serial-devices">Target Mode with Serial Devices&lt;/h1>
&lt;p>Usually, you will work with SSH or WinRM to connect to remote nodes and configure them. Those standard protocols bring along all the perks of a modern network connection: Encryption, Authentication, File transfers, etc&lt;/p>
&lt;p>But what if you have a device without network connectivity?&lt;/p></description></item><item><title>The kitchen-vcenter Driver</title><link>https://tecracer-chef.github.io/2019/09/the-kitchen-vcenter-driver.html</link><pubDate>Fri, 27 Sep 2019 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2019/09/the-kitchen-vcenter-driver.html</guid><description>&lt;h1 id="the-kitchen-vcenter-driver">The kitchen-vcenter Driver&lt;/h1>
&lt;p>While many companies already rely on some Cloud for all of their IT systems, bigger enterprise customers often have own data centers which consist of thousands of virtual machines. Under these circumstances, it is often not desirable to only test Chef cookbooks on AWS or Azure, but doing this in the real environment is a better idea. The &lt;code>kitchen-vcenter&lt;/code> driver allows you to harness the power of your own IT systems.&lt;/p></description></item><item><title>The kitchen-ec2 Driver</title><link>https://tecracer-chef.github.io/2019/09/the-kitchen-ec2-driver.html</link><pubDate>Fri, 20 Sep 2019 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2019/09/the-kitchen-ec2-driver.html</guid><description>&lt;h1 id="the-kitchen-ec2-driver">The kitchen-ec2 Driver&lt;/h1>
&lt;p>Within the Chef ecosystem, Test Kitchen is one of the most useful tools. It offers the possibility to quickly test cookbooks in different OS environments on machines with a limited lifetime. That way, you can check if your fancy recipes work the same on RedHat, Centos 6 and Ubuntu. As speed is king, this fast feedback motivates more for early testing and reduces the amount of bugs found in production.&lt;/p></description></item><item><title>Custom Resource Diffs in Chef</title><link>https://tecracer-chef.github.io/2019/09/custom-resource-diffs-in-chef.html</link><pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2019/09/custom-resource-diffs-in-chef.html</guid><description>&lt;h1 id="custom-resource-diffs-in-chef">Custom Resource Diffs in Chef&lt;/h1>
&lt;p>If you are writing custom resources regularly, you might have been annoyed by a general &amp;ldquo;diff&amp;rdquo; functionality in Chef. In this post we will work on some snippets to make this possible&lt;/p></description></item><item><title>Writing Chef Target Mode Resources</title><link>https://tecracer-chef.github.io/2019/09/writing-chef-target-mode-resources.html</link><pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2019/09/writing-chef-target-mode-resources.html</guid><description>&lt;h1 id="writing-chef-target-mode-resources">Writing Chef Target Mode Resources&lt;/h1>
&lt;p>After my previous blog posts, you might be tempted to write your own Chef custom resources which are compatible with Target Mode.&lt;/p>
&lt;p>Luckily, this is very easy - so this will be a short one.&lt;/p></description></item><item><title>Local Preprocessing in Target Mode</title><link>https://tecracer-chef.github.io/2019/08/local-preprocessing-in-target-mode.html</link><pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2019/08/local-preprocessing-in-target-mode.html</guid><description>&lt;h1 id="local-preprocessing-in-target-mode">Local Preprocessing in Target Mode&lt;/h1>
&lt;p>If you ever created configuration files with any automation system, you know that this involves a lot of templating. This is actually one of the most basic tasks that Chef performs and it is done using the &lt;code>template&lt;/code> resource.&lt;/p>
&lt;p>With Chef&amp;rsquo;s Target Mode this currently is a bit more complicated.&lt;/p></description></item><item><title>Target Mode with Chef Server and Chef Automate</title><link>https://tecracer-chef.github.io/2019/08/target-mode-with-chef-server-and-chef-automate.html</link><pubDate>Fri, 23 Aug 2019 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2019/08/target-mode-with-chef-server-and-chef-automate.html</guid><description>&lt;h1 id="target-mode-with-chef-server-and-chef-automate">Target Mode with Chef Server and Chef Automate&lt;/h1>
&lt;p>It is not sufficient to provision remote devices via Target Mode but we also want an overview of node attributes, run history and changed resources.&lt;/p>
&lt;p>In this post we have a look at how to connect agentless resources with central servers to give us the much-needed visibility.&lt;/p></description></item><item><title>Agentless Provisioning with Chef</title><link>https://tecracer-chef.github.io/2019/08/agentless-provisioning-with-chef.html</link><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2019/08/agentless-provisioning-with-chef.html</guid><description>&lt;h1 id="agentless-provisioning-with-chef">Agentless Provisioning with Chef&lt;/h1>
&lt;p>One of the main points of criticism about Chef I heard over the last few years has been the need to have an agent deployed at remote machines. Sometimes that is not desired, sometimes it is not even possible.&lt;/p>
&lt;p>Due to this, configuring remote machines has become the stronghold of other tools - but a new feature of Chef changes the landscape fundamentally.&lt;/p></description></item><item><title>Chef Interactive</title><link>https://tecracer-chef.github.io/2019/06/chef-interactive.html</link><pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2019/06/chef-interactive.html</guid><description>&lt;p>Es ist vermutlich bekannt, dass &lt;a href="https://chef.io">Chef&lt;/a> ein Tool für die automatische Provisionierung und Konfiguration von Systemen ist. Sobald man also ein Problem hat, dass diese beiden Bereiche verlässt, werden Internetposts und Supportanfragen jeder Art wahrscheinlich in eine von zwei Antworten münden: „Das ist nicht möglich“ oder „So macht man das aber nicht“.&lt;/p>
&lt;p>Aber – was wenn man einen echten, exotischen Anwendungsfall hat. Und das möglicherweise nur als Übergangslösung?&lt;/p></description></item><item><title>Chef Interactive</title><link>https://tecracer-chef.github.io/2019/06/chef-interactive.html</link><pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2019/06/chef-interactive.html</guid><description>&lt;p>As you probably are aware, &lt;a href="https:%5Cchef.io">Chef&lt;/a> is a tool which is meant for automatic provisioning and configuring of systems. So if you have a particular problem falling outside of the regular use cases, both posts on the internet and support enquiries of any kind will probably result in one of two answers: &amp;ldquo;that is not possible&amp;rdquo; or &amp;ldquo;you are doing it wrong&amp;rdquo;.&lt;/p>
&lt;p>But - what if you really need this for a rather exotic task or even as an transitory solution?&lt;/p></description></item><item><title>Chef Cookbooks und Kitchen</title><link>https://tecracer-chef.github.io/2019/03/chef-cookbooks-und-kitchen.html</link><pubDate>Wed, 27 Mar 2019 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2019/03/chef-cookbooks-und-kitchen.html</guid><description>AWS hat Chef als Technologiepartner. Da nicht nur AWS Chef in ihren Services wie OpsWorks oder OpsWorks Chef Automate nutzt, sondern auch wir, möchte ich eine kurze Einführung von Chef und Test-Kitchen geben.
In diesem Teil werden wir feststellen, wie schnell es geht, ein Testsystem mit den richtigen Mitteln zu erstellen. Im nächsten Teil werden wir das Ganze noch weiter verfeinern.
Chef Cookbooks und Kitchen Warum Chef und was hat das mit AWS zu tun?</description></item><item><title>Mit allen verbunden Teil 2</title><link>https://tecracer-chef.github.io/2019/01/mit-allen-verbunden-teil-2.html</link><pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate><guid>https://tecracer-chef.github.io/2019/01/mit-allen-verbunden-teil-2.html</guid><description>Infrastrukturtest des Transit Gateway mit kitchen und Inspec
Transit Gateway (What is a Transit Gateway? – Amazon Virtual Private Cloud) ist ein neuer AWS Service, der VPC Peering komplett ablösen kann. Zusätzlich kann damit auch ein „transitives&amp;quot; Peering gebaut werden. Das heißt, anders als bei einer VPC Peering Verbindung, die immer nur zwei VPCs miteinander verbindet, werden hier alle Netze miteinander verbunden. Das lohnt es sich genau zu testen! Diesen Test will ich hier möglichst vollautomatisiert aufbauen.</description></item></channel></rss>